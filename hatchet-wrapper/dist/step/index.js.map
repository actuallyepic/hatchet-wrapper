{"version":3,"sources":["../../src/step/index.ts"],"sourcesContent":["import z from \"zod\";\nimport { HatchetContext, InputDefinition, StepInputs } from \"../_types\";\nexport type { HatchetContext, InputDefinition, StepInputs } from \"../_types\";\n\nexport class StepBuilder<T extends Record<string, InputDefinition<any>>, R> {\n    public name: string;\n    private inputDefinitions: T;\n    private runFunction: (inputs: StepInputs<T>, ctx: HatchetContext) => Promise<R>;\n\n    constructor(name: string) {\n        this.name = name;\n        this.inputDefinitions = {} as T;\n        this.runFunction = async () => { throw new Error('Run function not set'); };\n    }\n\n    addInput<K extends string, S extends z.ZodTypeAny>(\n        name: K,\n        schema: S\n    ): StepBuilder<T & Record<K, InputDefinition<S>>, R> {\n        return Object.assign(this, {\n            inputDefinitions: {\n                ...this.inputDefinitions,\n                [name]: { name, schema },\n            },\n        });\n    }\n\n    setRun<NewR>(fn: (inputs: StepInputs<T>, ctx: HatchetContext) => Promise<NewR>): StepBuilder<T, NewR> {\n        return Object.assign(new StepBuilder<T, NewR>(this.name), this, { runFunction: fn });\n    }\n\n    build() {\n        return {\n            name: this.name,\n            inputDefinitions: this.inputDefinitions,\n            run: this.runFunction,\n        };\n    }\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIO,IAAM,cAAN,MAAM,aAA+D;AAAA,EACjE;AAAA,EACC;AAAA,EACA;AAAA,EAER,YAAY,MAAc;AACtB,SAAK,OAAO;AACZ,SAAK,mBAAmB,CAAC;AACzB,SAAK,cAAc,YAAY;AAAE,YAAM,IAAI,MAAM,sBAAsB;AAAA,IAAG;AAAA,EAC9E;AAAA,EAEA,SACI,MACA,QACiD;AACjD,WAAO,OAAO,OAAO,MAAM;AAAA,MACvB,kBAAkB;AAAA,QACd,GAAG,KAAK;AAAA,QACR,CAAC,IAAI,GAAG,EAAE,MAAM,OAAO;AAAA,MAC3B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EAEA,OAAa,IAAyF;AAClG,WAAO,OAAO,OAAO,IAAI,aAAqB,KAAK,IAAI,GAAG,MAAM,EAAE,aAAa,GAAG,CAAC;AAAA,EACvF;AAAA,EAEA,QAAQ;AACJ,WAAO;AAAA,MACH,MAAM,KAAK;AAAA,MACX,kBAAkB,KAAK;AAAA,MACvB,KAAK,KAAK;AAAA,IACd;AAAA,EACJ;AACJ;","names":[]}