{"version":3,"sources":["../../src/_types/index.ts"],"sourcesContent":["import z from \"zod\";\nimport { StepBuilder } from \"../step\";\nimport { Context } from \"@hatchet-dev/typescript-sdk\";\n\nexport type Primitive = string | number | boolean | null | undefined;\n\nexport type DeepKeyOf<T> = T extends Primitive\n    ? never\n    : T extends any[]\n    ? never\n    : T extends object\n    ? { [K in keyof T]: K extends string | number ? K | `${K}.${DeepKeyOf<T[K]>}` : never }[keyof T]\n    : never;\n\nexport type InputSource<PreviousSteps extends { [key: string]: any }, WorkflowInputSchema extends z.ZodTypeAny> =\n    | { type: 'workflowInput', path: DeepKeyOf<z.infer<WorkflowInputSchema>> }\n    | { [K in keyof PreviousSteps]: { type: 'stepOutput', stepName: K, path: DeepKeyOf<PreviousSteps[K]> } }[keyof PreviousSteps];\n\nexport type InputDefinition<T extends z.ZodTypeAny> = {\n    name: string;\n    schema: T;\n};\n\nexport type StepInputs<T extends Record<string, InputDefinition<any>>> = {\n    [K in keyof T]: z.infer<T[K]['schema']>\n};\n\nexport type StepDefinition<T extends Record<string, InputDefinition<any>>, R> = ReturnType<StepBuilder<T, R>['build']>;\n\nexport type HatchetContext = Context<any, any>;\n"],"mappings":";;;;;;;;;;;;;;;;AAAA;AAAA;","names":[]}